name: Discarded workflow experiments

on:
  workflow_dispatch:
    # inputs:
    #   pr_id:
    #     description: 'Pull Request ID'
    #     required: true
    #   workflow_run:
    #     workflows: ["Verify formatting"]
    #     types:
    #       - completed
  pull_request:
    branches: [main]

env:
  GH_TOKEN: ${{ github.token }}
#
# ! NOTE, these steps are not meant to be run together,
# ! they are just snippets from different workflows
#
jobs:
  formatting:
    permissions:
      contents: "write"
      pull-requests: "write"
      actions: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.create_token.outputs.token }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get Prettier version from package-lock.json
        run: |
          PRETTIER_VERSION=$(grep -m 1 'prettier' package-lock.json | cut -d '"' -f 4 | cut -c 2-)
          echo $PRETTIER_VERSION

      - name: Run Prettier (specific version)
        run: |
          npx --yes prettier@$PRETTIER_VERSION --config .prettierrc --write .

      #extract the latest commit sha from the PR
      - name: Check for changes
        id: check-changes
        run: |
          git config --global user.name "sPhil_PR_quality_ctl"
          git config --global user.email "actions@github.com"
          if [[ `git status --porcelain` ]]; then
              git add .
              git commit -m "ci: format code with Prettier [on behalf of ${{ github.event.pull_request.user.login }}]"
              git push origin HEAD:${{ github.event.pull_request.head.ref }}
              COMMIT_SHA=$(git rev-parse HEAD)
              echo "Commit SHA: $COMMIT_SHA"
              echo "::set-output name=commit_sha::$COMMIT_SHA"
          fi

      #extract the latest commit sha from the PR using script
      - name: Get sha from PR number and save output
        id: get-sha
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.info('PR number: ' + ${{ github.event.pull_request.number }})
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.pull_request.number }}
            })
            console.info('PR Head sha: ' + pr.data.head.sha)
            core.setOutput('sha', pr.data.head.sha)

      #invoke another workflow using custom inputs
      - name: Invoke workflow
        run: |
          echo "SHA: ${{ steps.check-changes.outputs.commit_sha }}"
          gh workflow run verify_mdx_content.yaml --ref ${{ github.event.pull_request.head.ref }} -f pr_id=${{ steps.check-changes.outputs.commit_sha }}
        # pr_id=${{ steps.get-sha.outputs.sha }}

      #creating checks for the workflow
      - name: Report tests check
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.checks.create({
                name: 'prepyrus verification',
                head_sha: '${{ github.event.inputs.pr_id }}',
                status: 'completed',
                conclusion: '${{ steps.prepyrus-run.outcome }}',
                output: {
                title: 'Prepyrus verification',
                summary: 'Results: ${{ steps.prepyrus-run.outcome }}'
                },
                owner: context.repo.owner,
                repo: context.repo.repo
            })
        if: always()

        # head_sha: '${{ github.event.inputs.pr_id }}',

    # - name: Check for changes (using git - this will make "github_actions" the author)
    id: check-changes
    run: |
      git config --global user.name "sPhil_PR_quality_ctl"
      git config --global user.email "actions@github.com"
      if [[ `git status --porcelain` ]]; then
          git add .
          git commit -m "ci: format code [automated action on behalf of ${{ github.event.pull_request.user.login }}]"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
      fi
