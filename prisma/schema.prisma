// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

// === SECTION 1 ==============================================
// * User Access and Permissions
// ============================================================
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String    @unique
    emailVerified    DateTime?
    stripeCustomerId String?   @unique
    image            String?
    role             Role      @default(BASIC)

    // Internal relations
    accounts         Account[]
    sessions         Session[]
    coursesCreated   Course[]             @relation("CourseCreators")
    coursesAssisted  Course[]             @relation("CourseAssistants")
    lessonsCompleted UserLessonProgress[]

    // Commercial relations
    purchases      CoursePurchase[]
    seminarCohorts SeminarCohort[]  @relation("SeminarCohortParticipants")

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

enum Role {
    BASIC
    ADMIN
    SUPERADMIN
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// === SECTION 2 ==============================================
// * Course, Seminars, Lessons and Content related data
// ============================================================
model Course {
    id                    String   @id @default(cuid())
    name                  String
    description           String
    slug                  String   @unique
    stripeProductId       String?
    basePrice             Float
    stripeBasePriceId     String?
    seminarPrice          Float
    stripeSeminarPriceId  String?
    dialoguePrice         Float
    stripeDialoguePriceId String?
    imageUrl              String?
    author                String?
    infoboxTitle          String?
    infoboxDescription    String?
    baseAvailability      DateTime @default(now())
    seminarAvailability   DateTime @default(now())
    dialogueAvailability  DateTime @default(now())
    published             Boolean  @default(false)

    // Internal relations
    creators   User[]         @relation("CourseCreators")
    assistants User[]         @relation("CourseAssistants")
    parts      Part[]
    lessons    Lesson[]
    details    CourseDetails?

    // Commercial relations
    seminarCohorts SeminarCohort[]
    purchases      CoursePurchase[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SeminarCohort {
    id                          String @id @default(cuid())
    year                        Int
    courseId                    String
    seminarOnlyPrice            Float
    stripeSeminarOnlyPriceId    String
    seminarUpgradePrice         Float
    stripeSeminarUpgradePriceId String

    // Internal relations
    course   Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
    details  SeminarCohortDetails?
    seminars Seminar[]

    // Commercial relations
    participants User[] @relation("SeminarCohortParticipants")

    notes     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([year, courseId])
}

model SeminarCohortDetails {
    id              String        @id @default(cuid())
    seminarCohort   SeminarCohort @relation(fields: [seminarCohortId], references: [id], onDelete: Cascade)
    seminarCohortId String        @unique
    mdxCategory     MdxCategory   @default(DETAILS)
    mdx             Bytes
    mdxCompiled     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Seminar {
    id        String  @id @default(cuid())
    order     Int
    published Boolean @default(false)

    seminarCohort   SeminarCohort      @relation(fields: [seminarCohortId], references: [id], onDelete: Cascade)
    seminarCohortId String
    content         SeminarContent?
    transcript      SeminarTranscript?
    video           SeminarVideo?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([seminarCohortId, order])
}

model SeminarVideo {
    id        String   @id @default(cuid())
    seminar   Seminar? @relation(fields: [seminarId], references: [id], onDelete: Cascade)
    seminarId String?  @unique
    fileName  String
    duration  Float?
    posterUrl String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SeminarContent {
    id          String      @id @default(cuid())
    seminar     Seminar?    @relation(fields: [seminarId], references: [id], onDelete: Cascade)
    seminarId   String?     @unique
    mdxCategory MdxCategory @default(CONTENT)
    mdx         Bytes
    mdxCompiled String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SeminarTranscript {
    id          String      @id @default(cuid())
    seminar     Seminar?    @relation(fields: [seminarId], references: [id], onDelete: Cascade)
    seminarId   String?     @unique
    mdxCategory MdxCategory @default(TRANSCRIPT)
    mdx         Bytes
    mdxCompiled String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum MdxCategory {
    CONTENT
    TRANSCRIPT
    DETAILS
}

model CourseDetails {
    id          String      @id @default(cuid())
    course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String      @unique
    mdxCategory MdxCategory @default(DETAILS)
    mdx         Bytes
    mdxCompiled String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Part {
    id       String   @id @default(cuid())
    name     String
    slug     String
    course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId String
    lessons  Lesson[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Lesson {
    id             String               @id @default(cuid())
    name           String
    description    String
    slug           String
    order          Int
    part           Part?                @relation(fields: [partId], references: [id])
    partId         String?
    course         Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId       String
    content        LessonContent?
    transcript     LessonTranscript?
    video          Video?
    usersCompleted UserLessonProgress[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LessonContent {
    id          String      @id @default(cuid())
    lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId    String      @unique
    mdxCategory MdxCategory @default(CONTENT)
    mdx         Bytes
    mdxCompiled String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LessonTranscript {
    id          String      @id @default(cuid())
    lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId    String      @unique
    mdxCategory MdxCategory @default(TRANSCRIPT)
    mdx         Bytes
    mdxCompiled String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Video {
    id        String  @id @default(cuid())
    lesson    Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String? @unique
    fileName  String
    duration  Float?
    posterUrl String?
}

model UserLessonProgress {
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId    String
    completedAt DateTime @default(now())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, lessonId])
}

// === SECTION 3 ==============================================
// * Stripe & Product related data
// ============================================================
model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json?
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

model CoursePurchase {
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([courseId, userId])
}

enum ProductsAuxiliaryKinds {
    SEMINAR_ONLY
    OTHER
}

model ProductsAuxiliary {
    id                   String                 @id @default(cuid())
    kind                 ProductsAuxiliaryKinds @unique
    stripeProductId      String
    priceDefault         Float
    stripePriceIdDefault String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// === SECTION 4 ==============================================
// * Miscellaneous internal data
// ============================================================

enum MaintenanceArea {
    global
    user
}

enum MaintenanceSeverity {
    success
    info
    warning
    critical
    beta
}

model MaintenanceMessage {
    id        String              @id @default(cuid())
    area      MaintenanceArea     @unique
    severity  MaintenanceSeverity
    published Boolean             @default(false)
    message   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model NewsletterEmail {
    id         String  @id @default(cuid())
    email      String  @unique
    subscribed Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
